import { getCurrentUserValue } from '@/utils/user-utils.js';
import utils from '@/utils/utils.js';
import fetchFriends from '@/lobby/fetch-friends.js';


const addFriendForm = document.querySelector('.add-friend-form');
const addFriendInput = addFriendForm.querySelector('.add-friend-input');
const friendCodeInput = addFriendForm.querySelector('.friend-code-input');
const addFriendStatus = addFriendForm.querySelector('.add-friend-status');


export default function addFriendSection(lobbySocket) {

  /* 
    TODO
    When adding friend, the friend will need to provide them with a 4 digit friend-code in order for the server to accept the add. The friend code can be generated by the user at any time. When the server validates both the name and friend code, each username will be set in each other's friend lists.

    Server checks:
    1) Username exists
    2) Username is not the same as the current players
    3) Friend code is valid

    Remove friend feature will need to be updated.

    When inviting someone, the server will need to first check if the invitee is in the user's friend list.
  */
  

  // Add friend form
  addFriendForm.addEventListener('submit', e => {
    e.preventDefault();

    const friendToAdd = addFriendInput.value;
    const friendCode = friendCodeInput.value;

    if (!friendToAdd) {
      return addFriendStatus.textContent = 'Must enter friend name';
    } else if (!friendCode) {
      return addFriendStatus.textContent = 'Must enter friend code';
    }

    addFriendStatus.textContent = '';
    addFriend(friendToAdd, friendCode);
  });


  // Friend submenu
  document.addEventListener('click', ({ target }) => {
  
    // Invite friend
    if (target.matches('.invite-friend')) {
      const friendToInvite = target.closest('.friend-menu').dataset.friendUsername;
      inviteFriend(friendToInvite, lobbySocket);
    }
  
    // Remove friend
    if (target.matches('.remove-friend')) {
      const friendToRemove = target.closest('.friend-menu').dataset.friendUsername;
      removeFriend(friendToRemove);
    }
  });
}


function removeFriend(friendToRemove) {
  const currentUserID = getCurrentUserValue('id');
  if (!currentUserID) return;

  console.log({ friendToRemove });
   
  fetch('http://localhost:8080/api/remove-friend', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ currentUserID, friendToRemove })
  })
  .then(response => response.json())
  .then(data => {
    console.log('/api/remove-friend: \n', data);
    fetchFriends();
  });
}

function inviteFriend(friendToInvite, lobbySocket) {
  lobbySocket.emit('inviteFriend', friendToInvite);
}

function addFriend(friendToAdd, friendCode) {
  // const currentUserID = getCurrentUserValue('id');
  // TODO: Test req manually without being logged in
   
  fetch('/add-friend', {
    method: 'POST',
    headers: { 
      'Content-Type': 'application/json',
      'CSRF-Token': utils.getCookie('XSRF-TOKEN')
    },
    body: JSON.stringify({ 
      friendToAdd,
      friendCode
    })
  })
  .then(response => response.json())
  .then(data => {
    console.log('/api/add-friend: \n', data);

    addFriendStatus.textContent = data.result;
    setTimeout(() => { addFriendStatus.textContent = ''}, 3000);

    if (data.result.includes('Friend added:')) {
      fetchFriends();
      [addFriendInput, friendCodeInput].forEach(input => input.value = '');
    }
  });
}
